import type { AttemptState } from '../../shared/patterns/attempt-store.js';
import type { ErrorFingerprint } from '../../shared/patterns/fingerprinter.js';
import { MAX_ATTEMPTS } from '../../shared/patterns/attempt-store.js';

export interface PRTemplateParams {
  fingerprint: ErrorFingerprint;
  error: {
    type: string;
    message: string;
    filePath: string;
    stack: string;
  };
  attemptState: AttemptState;
  patchSummary: string;
  sanitizedStack: string;
  breadcrumbs: string[];
  testResults: {
    passed: number;
    total: number;
  };
  tierUsed: number;
  nextBackoff: Date;
  fixCost: number;
  tokenUsage: {
    input: number;
    output: number;
    cacheRead: number;
    cacheWrite: number;
  };
  fixSource: 'pattern' | 'ai';
  diffLines: number;
  fileCount: number;
  maxDiffLines: number;
  maxFiles: number;
  patternId?: string;
  confidence?: number;
  patternStrategy?: 'exact' | 'fuzzy';
}

function formatBreadcrumbs(breadcrumbs: string[]): string {
  if (!breadcrumbs.length) {
    return '_Not available_';
  }
  return breadcrumbs.map((crumb) => `- ${crumb}`).join('\n');
}

function formatStack(stack: string): string {
  return stack.trim().split('\n').slice(0, 30).join('\n');
}

function formatConfidence(confidence?: number): string {
  if (confidence == null) {
    return 'N/A';
  }
  return `${Math.round(confidence * 1000) / 10}%`;
}

function formatPattern(patternId?: string): string {
  return patternId ?? 'N/A';
}

function formatPatchSummary(summary: string): string {
  const trimmed = summary.trim();
  return trimmed ? trimmed : '_Patch summary unavailable_';
}

export function generatePRBody(params: PRTemplateParams): string {
  const tokenSummary = JSON.stringify(params.tokenUsage, null, 2);
  const stack = formatStack(params.sanitizedStack);
  const breadcrumbs = formatBreadcrumbs(params.breadcrumbs);
  const patternId = formatPattern(params.patternId);
  const confidence = formatConfidence(params.confidence);
  const patchSummary = formatPatchSummary(params.patchSummary);

  return `## ðŸ¤– Homeostat Auto-Fix

**Fingerprint**: \`${params.fingerprint.id}\`
**Error Type**: ${params.error.type}
**File**: ${params.error.filePath}
**Attempt**: ${params.attemptState.attempts + 1}/${MAX_ATTEMPTS}

### What Changed
${patchSummary}

### Error Details
**Message**: ${params.error.message}

**Stack Trace** (sanitized):
\`\`\`
${stack}
\`\`\`

### Breadcrumbs (User Actions)
${breadcrumbs}

### Test Results
- âœ… **Tests Passed**: ${params.testResults.passed}/${params.testResults.total}
- âœ… **TypeScript**: No errors
- âœ… **Lint**: Passed

### Homeostat State
\`\`\`json
{
  "fingerprint": "${params.fingerprint.id}",
  "tier": ${params.tierUsed},
  "attempts": ${params.attemptState.attempts + 1},
  "lastAttemptAt": "${new Date().toISOString()}",
  "backoffUntil": "${params.nextBackoff.toISOString()}",
  "cost": "${params.fixCost.toFixed(4)}",
  "tokens": ${tokenSummary},
  "source": "${params.fixSource}"
}
\`\`\`

### How to Opt-Out
Add label \`do-not-fix\` to the original issue to prevent future attempts.

### Safety Checks
- âœ… Diff size: ${params.diffLines} lines (limit: ${params.maxDiffLines})
- âœ… Files changed: ${params.fileCount} files (limit: ${params.maxFiles})
- âœ… No secrets detected
- âœ… Path filters passed

---
*Generated by Homeostat v1.0.0 | Pattern: ${patternId} | Confidence: ${confidence} | Strategy: ${params.patternStrategy ?? 'N/A'}*
`;
}

export default generatePRBody;
